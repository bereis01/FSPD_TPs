// DCC641 - Fundamentos de Sistemas Paralelos e Distribuídos
// Segundo Exercício de Programação
// Nome: Bernardo Reis de Almeida
// Matrícula: 2021032234

syntax = "proto3";

package bank;

// The bank service definition.
service Bank 
{
    // Returns the balance of the given account, if it exists.
    rpc ReadBalance (AccountRequest) returns (AccountResponse) {}

    // Registers a debit order with the given value for the given account.
    rpc RegisterOrder (OrderRequest) returns (OrderResponse) {}

    // Executes a transference of an order to an account.
    rpc ExecuteTransfer (TransferRequest) returns (TransferResponse) {}

    // Finalizes the server execution.
    rpc Finalize (FinalizeRequest) returns (FinalizeResponse) {}
}

// A message with a request for the balance an account.
message AccountRequest
{
    string account_id = 1;
}

// A message with the status of an account request.
// The value can be the balance of the account or an error code.
message AccountResponse 
{
    int32 value = 1;
}

// A message with a debit order for an account.
message OrderRequest
{
    string account_id = 1;
    int32 amount = 2;
}

// A message with the status of a requested order.
// The value can be the id of the order or an error code.
message OrderResponse
{
    int32 value = 1;
}

// A message with a transfer request for an order to an account.
message TransferRequest
{
    int32 order_id = 1;
    int32 amount_check = 2;
    string account_id = 3;
}

// A message with the status of a transfer operation.
// The value can be 0 for a successfull transfer or an error code.
message TransferResponse
{
    int32 value = 1;
}

// An empty message.
message FinalizeRequest {}

// A message with the amount of pending orders when the server finalizes.
message FinalizeResponse
{
    int32 value = 1;
}